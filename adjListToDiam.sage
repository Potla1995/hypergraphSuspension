from sage.graphs.graph_input import from_dict_of_lists

files = ['Graph-D-11-3.csv', 'Graph-Dp-11-3.csv']
k = 11
q = 3

# Declare graph objects D11_3 and Dp11_3 and import them from the csv files generated by exportAdjLists.cpp

D11_3 = Graph()
Dp11_3 = Graph()

adjlists = []
for file in files:
	f = open(file,'r')
	L = f.readlines()
	L = [l.strip().split(';') for l in L]
	x = {}
	for l in L:
		x[l[0]]=l[1:len(l)-1]
	
	adjlists.append(x)

from_dict_of_lists(D11_3, adjlists[0])
from_dict_of_lists(Dp11_3, adjlists[1])

# Compute and print the component sizes of D(11,3) and D'(11,3)

print('Component sizes for D(11,3) and D\'(11,3):')
print(D11_3.connected_component_sizes())
print(Dp11_3.connected_component_sizes())

# Import the graphs CD(11,3) and CD'(11,3) from conn_comp_edges.py
from conn_comp_edges import cd113_edges, cdp113_edges
CD11_3 = Graph()
CDp11_3 = Graph()
CD11_3.add_edges(cd113_edges)
CDp11_3.add_edges(cdp113_edges)

# Compute the diameters of CD(11,3) And CD'(11,3)
d1 = CD11_3.diameter()
d2 = CDp11_3.diameter()

print('\nDiameter of CD(11,3): %d, Diameter of CD\'(11,3): %d' %(d1, d2))

# Compute and print the number of paths from (0,0,...,0) in A to (0,0,...,0) in B

paths_0_to_0_D11_3 =  CD11_3.to_directed().all_simple_paths(starting_vertices = ['00000000000'], ending_vertices = ['00000000000\''], max_length = d1)
paths_0_to_0_Dp11_3 =  CDp11_3.to_directed().all_simple_paths(starting_vertices = ['00000000000'], ending_vertices = ['00000000000\''], max_length = d2)

print('\nNumber of paths from 0 (left) to 0 (right):\n in D(11,3): %d, in D\'(11,3): %d' %(len(paths_0_to_0_D11_3), len(paths_0_to_0_Dp11_3)))

# Store the paths from (0,0,...0) in A to (0,0,...,0) in B
f = open('Cycles_through_00.txt', 'w')
s = 'D(11,3): ' + str(paths_0_to_0_D11_3) + '\n\nD\'(11,3): ' + str(paths_0_to_0_Dp11_3)
f.write(s)
